#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 22 22:12:27 2023

@author: nikkivanhandel
"""
from shapely import geometry as geom
from numpy import zeros
'''
seed_dict = {'sz': (80,80),
             'nx': 10,
             'ny': 10,
             'thickness' = 0.7,
             'center' = (0,0)}
'''

def createSeeds(shape, sz=(80,80),
                n_dir=(10,10), thick=0.7,
                c=(0,0),):
    '''
    

    Parameters
    ----------
    shape : str
        's', 't', or 'h' for square, triangle, or hexagon respectively. Dictates lattice shape
    c : 2-tuple, optional
        Center point of lattice. The default is (0,0).
    sz : Size of lattice in mm. The default is (80,80).
    n_dir : 2-tuple, optional
        Number of nodes in either direction . The default is (10,10).
    thick : float, optional
        Strut thickness. The default is 0.7.

    Returns
    -------
    lattice : polyshape

    '''
    pass
#
sz, c, n_dir = (80,80), (0,0), (10,10)
shape = 's'
#
w, h = sz # Decompose lattice size 
cx, cy = c 
nx, ny = n_dir

# Define Exterior
box = geom.Polygon([[cx-0.5*w, cy-0.5*h],
                    [cx-0.5*w, cy+0.5*h],
                    [cx+0.5*w, cy+0.5*h], 
                    [cx+0.5*w, cy-0.5*h]])

# Rows ofpoints outside box boundary
buff = 3

nx_ext, ny_ext = nx+buff*2, ny+buff*2
nt = nx_ext*ny_ext

# Define Cell Dimensions 
cw, ch, = w/nx, h/ny

count = 0;
pointvals = zeros((nt, 2)):
    
for i in range(nx_ext):
    for j in range(ny_ext):
        count += 1;
        
        pointvals[count] = i*cw, j*ch
R = [0.5*(w+cw*buff-cw ]

        R = [-(width*0.5+cellwidth*bufferx-cellwidth*(0.5)),-(height*0.5+cellheight*buffery-cellheight*0.5)];

lattice = 0
